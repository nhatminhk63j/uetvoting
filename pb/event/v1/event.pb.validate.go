// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: event/v1/event.proto

package event

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// define the regex for a UUID once up-front
var _event_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on UpsertEventRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpsertEventRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	if utf8.RuneCountInString(m.GetName()) < 1 {
		return UpsertEventRequestValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
	}

	if utf8.RuneCountInString(m.GetParticipants()) < 4 {
		return UpsertEventRequestValidationError{
			field:  "Participants",
			reason: "value length must be at least 4 runes",
		}
	}

	for idx, item := range m.GetSections() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UpsertEventRequestValidationError{
					field:  fmt.Sprintf("Sections[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// UpsertEventRequestValidationError is the validation error returned by
// UpsertEventRequest.Validate if the designated constraints aren't met.
type UpsertEventRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpsertEventRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpsertEventRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpsertEventRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpsertEventRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpsertEventRequestValidationError) ErrorName() string {
	return "UpsertEventRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpsertEventRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpsertEventRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpsertEventRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpsertEventRequestValidationError{}

// Validate checks the field values on UpsertEventResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpsertEventResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	return nil
}

// UpsertEventResponseValidationError is the validation error returned by
// UpsertEventResponse.Validate if the designated constraints aren't met.
type UpsertEventResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpsertEventResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpsertEventResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpsertEventResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpsertEventResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpsertEventResponseValidationError) ErrorName() string {
	return "UpsertEventResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpsertEventResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpsertEventResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpsertEventResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpsertEventResponseValidationError{}

// Validate checks the field values on GetEventByIDRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetEventByIDRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	return nil
}

// GetEventByIDRequestValidationError is the validation error returned by
// GetEventByIDRequest.Validate if the designated constraints aren't met.
type GetEventByIDRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetEventByIDRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetEventByIDRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetEventByIDRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetEventByIDRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetEventByIDRequestValidationError) ErrorName() string {
	return "GetEventByIDRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetEventByIDRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetEventByIDRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetEventByIDRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetEventByIDRequestValidationError{}

// Validate checks the field values on GetEventByIDResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetEventByIDResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Participants

	for idx, item := range m.GetSections() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetEventByIDResponseValidationError{
					field:  fmt.Sprintf("Sections[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetEventByIDResponseValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for IsOpened

	// no validation rules for IsApproved

	return nil
}

// GetEventByIDResponseValidationError is the validation error returned by
// GetEventByIDResponse.Validate if the designated constraints aren't met.
type GetEventByIDResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetEventByIDResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetEventByIDResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetEventByIDResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetEventByIDResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetEventByIDResponseValidationError) ErrorName() string {
	return "GetEventByIDResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetEventByIDResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetEventByIDResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetEventByIDResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetEventByIDResponseValidationError{}

// Validate checks the field values on UpsertEventRequest_Section with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpsertEventRequest_Section) Validate() error {
	if m == nil {
		return nil
	}

	if utf8.RuneCountInString(m.GetName()) < 1 {
		return UpsertEventRequest_SectionValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
	}

	if utf8.RuneCountInString(m.GetDescription()) < 1 {
		return UpsertEventRequest_SectionValidationError{
			field:  "Description",
			reason: "value length must be at least 1 runes",
		}
	}

	// no validation rules for Position

	for idx, item := range m.GetQuestions() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UpsertEventRequest_SectionValidationError{
					field:  fmt.Sprintf("Questions[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// UpsertEventRequest_SectionValidationError is the validation error returned
// by UpsertEventRequest_Section.Validate if the designated constraints aren't met.
type UpsertEventRequest_SectionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpsertEventRequest_SectionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpsertEventRequest_SectionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpsertEventRequest_SectionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpsertEventRequest_SectionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpsertEventRequest_SectionValidationError) ErrorName() string {
	return "UpsertEventRequest_SectionValidationError"
}

// Error satisfies the builtin error interface
func (e UpsertEventRequest_SectionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpsertEventRequest_Section.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpsertEventRequest_SectionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpsertEventRequest_SectionValidationError{}

// Validate checks the field values on UpsertEventRequest_Question with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpsertEventRequest_Question) Validate() error {
	if m == nil {
		return nil
	}

	if utf8.RuneCountInString(m.GetContent()) < 1 {
		return UpsertEventRequest_QuestionValidationError{
			field:  "Content",
			reason: "value length must be at least 1 runes",
		}
	}

	// no validation rules for Position

	// no validation rules for Type

	// no validation rules for IsRequired

	// no validation rules for LimitedChoice

	for idx, item := range m.GetOptions() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UpsertEventRequest_QuestionValidationError{
					field:  fmt.Sprintf("Options[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// UpsertEventRequest_QuestionValidationError is the validation error returned
// by UpsertEventRequest_Question.Validate if the designated constraints
// aren't met.
type UpsertEventRequest_QuestionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpsertEventRequest_QuestionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpsertEventRequest_QuestionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpsertEventRequest_QuestionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpsertEventRequest_QuestionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpsertEventRequest_QuestionValidationError) ErrorName() string {
	return "UpsertEventRequest_QuestionValidationError"
}

// Error satisfies the builtin error interface
func (e UpsertEventRequest_QuestionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpsertEventRequest_Question.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpsertEventRequest_QuestionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpsertEventRequest_QuestionValidationError{}

// Validate checks the field values on UpsertEventRequest_Option with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpsertEventRequest_Option) Validate() error {
	if m == nil {
		return nil
	}

	if utf8.RuneCountInString(m.GetContent()) < 1 {
		return UpsertEventRequest_OptionValidationError{
			field:  "Content",
			reason: "value length must be at least 1 runes",
		}
	}

	return nil
}

// UpsertEventRequest_OptionValidationError is the validation error returned by
// UpsertEventRequest_Option.Validate if the designated constraints aren't met.
type UpsertEventRequest_OptionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpsertEventRequest_OptionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpsertEventRequest_OptionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpsertEventRequest_OptionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpsertEventRequest_OptionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpsertEventRequest_OptionValidationError) ErrorName() string {
	return "UpsertEventRequest_OptionValidationError"
}

// Error satisfies the builtin error interface
func (e UpsertEventRequest_OptionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpsertEventRequest_Option.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpsertEventRequest_OptionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpsertEventRequest_OptionValidationError{}

// Validate checks the field values on GetEventByIDResponse_Section with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetEventByIDResponse_Section) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Description

	// no validation rules for Position

	for idx, item := range m.GetQuestions() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetEventByIDResponse_SectionValidationError{
					field:  fmt.Sprintf("Questions[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// GetEventByIDResponse_SectionValidationError is the validation error returned
// by GetEventByIDResponse_Section.Validate if the designated constraints
// aren't met.
type GetEventByIDResponse_SectionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetEventByIDResponse_SectionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetEventByIDResponse_SectionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetEventByIDResponse_SectionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetEventByIDResponse_SectionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetEventByIDResponse_SectionValidationError) ErrorName() string {
	return "GetEventByIDResponse_SectionValidationError"
}

// Error satisfies the builtin error interface
func (e GetEventByIDResponse_SectionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetEventByIDResponse_Section.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetEventByIDResponse_SectionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetEventByIDResponse_SectionValidationError{}

// Validate checks the field values on GetEventByIDResponse_Question with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetEventByIDResponse_Question) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for Content

	// no validation rules for Position

	// no validation rules for Type

	// no validation rules for IsRequired

	// no validation rules for LimitedChoice

	for idx, item := range m.GetOptions() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetEventByIDResponse_QuestionValidationError{
					field:  fmt.Sprintf("Options[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// GetEventByIDResponse_QuestionValidationError is the validation error
// returned by GetEventByIDResponse_Question.Validate if the designated
// constraints aren't met.
type GetEventByIDResponse_QuestionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetEventByIDResponse_QuestionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetEventByIDResponse_QuestionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetEventByIDResponse_QuestionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetEventByIDResponse_QuestionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetEventByIDResponse_QuestionValidationError) ErrorName() string {
	return "GetEventByIDResponse_QuestionValidationError"
}

// Error satisfies the builtin error interface
func (e GetEventByIDResponse_QuestionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetEventByIDResponse_Question.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetEventByIDResponse_QuestionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetEventByIDResponse_QuestionValidationError{}

// Validate checks the field values on GetEventByIDResponse_Option with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetEventByIDResponse_Option) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	if utf8.RuneCountInString(m.GetContent()) < 1 {
		return GetEventByIDResponse_OptionValidationError{
			field:  "Content",
			reason: "value length must be at least 1 runes",
		}
	}

	return nil
}

// GetEventByIDResponse_OptionValidationError is the validation error returned
// by GetEventByIDResponse_Option.Validate if the designated constraints
// aren't met.
type GetEventByIDResponse_OptionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetEventByIDResponse_OptionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetEventByIDResponse_OptionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetEventByIDResponse_OptionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetEventByIDResponse_OptionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetEventByIDResponse_OptionValidationError) ErrorName() string {
	return "GetEventByIDResponse_OptionValidationError"
}

// Error satisfies the builtin error interface
func (e GetEventByIDResponse_OptionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetEventByIDResponse_Option.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetEventByIDResponse_OptionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetEventByIDResponse_OptionValidationError{}
