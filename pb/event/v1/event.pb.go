// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: event/v1/event.proto

package event

import (
	fmt "fmt"
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	proto "github.com/golang/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// UpsertEventRequest ...
type UpsertEventRequest struct {
	Id                   int32                         `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                 string                        `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Participants         string                        `protobuf:"bytes,3,opt,name=participants,proto3" json:"participants,omitempty"`
	Sections             []*UpsertEventRequest_Section `protobuf:"bytes,4,rep,name=sections,proto3" json:"sections,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                      `json:"-"`
	XXX_unrecognized     []byte                        `json:"-"`
	XXX_sizecache        int32                         `json:"-"`
}

func (m *UpsertEventRequest) Reset()         { *m = UpsertEventRequest{} }
func (m *UpsertEventRequest) String() string { return proto.CompactTextString(m) }
func (*UpsertEventRequest) ProtoMessage()    {}
func (*UpsertEventRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f857b978571765b2, []int{0}
}
func (m *UpsertEventRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpsertEventRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpsertEventRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpsertEventRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpsertEventRequest.Merge(m, src)
}
func (m *UpsertEventRequest) XXX_Size() int {
	return m.Size()
}
func (m *UpsertEventRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpsertEventRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpsertEventRequest proto.InternalMessageInfo

func (m *UpsertEventRequest) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *UpsertEventRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *UpsertEventRequest) GetParticipants() string {
	if m != nil {
		return m.Participants
	}
	return ""
}

func (m *UpsertEventRequest) GetSections() []*UpsertEventRequest_Section {
	if m != nil {
		return m.Sections
	}
	return nil
}

// Section ...
type UpsertEventRequest_Section struct {
	Name                 string                         `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description          string                         `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Position             int32                          `protobuf:"varint,4,opt,name=position,proto3" json:"position,omitempty"`
	Questions            []*UpsertEventRequest_Question `protobuf:"bytes,5,rep,name=questions,proto3" json:"questions,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                       `json:"-"`
	XXX_unrecognized     []byte                         `json:"-"`
	XXX_sizecache        int32                          `json:"-"`
}

func (m *UpsertEventRequest_Section) Reset()         { *m = UpsertEventRequest_Section{} }
func (m *UpsertEventRequest_Section) String() string { return proto.CompactTextString(m) }
func (*UpsertEventRequest_Section) ProtoMessage()    {}
func (*UpsertEventRequest_Section) Descriptor() ([]byte, []int) {
	return fileDescriptor_f857b978571765b2, []int{0, 0}
}
func (m *UpsertEventRequest_Section) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpsertEventRequest_Section) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpsertEventRequest_Section.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpsertEventRequest_Section) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpsertEventRequest_Section.Merge(m, src)
}
func (m *UpsertEventRequest_Section) XXX_Size() int {
	return m.Size()
}
func (m *UpsertEventRequest_Section) XXX_DiscardUnknown() {
	xxx_messageInfo_UpsertEventRequest_Section.DiscardUnknown(m)
}

var xxx_messageInfo_UpsertEventRequest_Section proto.InternalMessageInfo

func (m *UpsertEventRequest_Section) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *UpsertEventRequest_Section) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *UpsertEventRequest_Section) GetPosition() int32 {
	if m != nil {
		return m.Position
	}
	return 0
}

func (m *UpsertEventRequest_Section) GetQuestions() []*UpsertEventRequest_Question {
	if m != nil {
		return m.Questions
	}
	return nil
}

// Question ...
type UpsertEventRequest_Question struct {
	Content              string                       `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"`
	Position             int32                        `protobuf:"varint,3,opt,name=position,proto3" json:"position,omitempty"`
	Type                 string                       `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`
	IsRequired           bool                         `protobuf:"varint,5,opt,name=is_required,json=isRequired,proto3" json:"is_required,omitempty"`
	LimitedChoice        int32                        `protobuf:"varint,6,opt,name=limited_choice,json=limitedChoice,proto3" json:"limited_choice,omitempty"`
	Options              []*UpsertEventRequest_Option `protobuf:"bytes,7,rep,name=options,proto3" json:"options,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                     `json:"-"`
	XXX_unrecognized     []byte                       `json:"-"`
	XXX_sizecache        int32                        `json:"-"`
}

func (m *UpsertEventRequest_Question) Reset()         { *m = UpsertEventRequest_Question{} }
func (m *UpsertEventRequest_Question) String() string { return proto.CompactTextString(m) }
func (*UpsertEventRequest_Question) ProtoMessage()    {}
func (*UpsertEventRequest_Question) Descriptor() ([]byte, []int) {
	return fileDescriptor_f857b978571765b2, []int{0, 1}
}
func (m *UpsertEventRequest_Question) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpsertEventRequest_Question) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpsertEventRequest_Question.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpsertEventRequest_Question) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpsertEventRequest_Question.Merge(m, src)
}
func (m *UpsertEventRequest_Question) XXX_Size() int {
	return m.Size()
}
func (m *UpsertEventRequest_Question) XXX_DiscardUnknown() {
	xxx_messageInfo_UpsertEventRequest_Question.DiscardUnknown(m)
}

var xxx_messageInfo_UpsertEventRequest_Question proto.InternalMessageInfo

func (m *UpsertEventRequest_Question) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

func (m *UpsertEventRequest_Question) GetPosition() int32 {
	if m != nil {
		return m.Position
	}
	return 0
}

func (m *UpsertEventRequest_Question) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *UpsertEventRequest_Question) GetIsRequired() bool {
	if m != nil {
		return m.IsRequired
	}
	return false
}

func (m *UpsertEventRequest_Question) GetLimitedChoice() int32 {
	if m != nil {
		return m.LimitedChoice
	}
	return 0
}

func (m *UpsertEventRequest_Question) GetOptions() []*UpsertEventRequest_Option {
	if m != nil {
		return m.Options
	}
	return nil
}

// Option ...
type UpsertEventRequest_Option struct {
	Content              string   `protobuf:"bytes,1,opt,name=content,proto3" json:"content,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpsertEventRequest_Option) Reset()         { *m = UpsertEventRequest_Option{} }
func (m *UpsertEventRequest_Option) String() string { return proto.CompactTextString(m) }
func (*UpsertEventRequest_Option) ProtoMessage()    {}
func (*UpsertEventRequest_Option) Descriptor() ([]byte, []int) {
	return fileDescriptor_f857b978571765b2, []int{0, 2}
}
func (m *UpsertEventRequest_Option) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpsertEventRequest_Option) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpsertEventRequest_Option.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpsertEventRequest_Option) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpsertEventRequest_Option.Merge(m, src)
}
func (m *UpsertEventRequest_Option) XXX_Size() int {
	return m.Size()
}
func (m *UpsertEventRequest_Option) XXX_DiscardUnknown() {
	xxx_messageInfo_UpsertEventRequest_Option.DiscardUnknown(m)
}

var xxx_messageInfo_UpsertEventRequest_Option proto.InternalMessageInfo

func (m *UpsertEventRequest_Option) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

// UpsertEventResponse ...
type UpsertEventResponse struct {
	Id                   int32    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpsertEventResponse) Reset()         { *m = UpsertEventResponse{} }
func (m *UpsertEventResponse) String() string { return proto.CompactTextString(m) }
func (*UpsertEventResponse) ProtoMessage()    {}
func (*UpsertEventResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f857b978571765b2, []int{1}
}
func (m *UpsertEventResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpsertEventResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpsertEventResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpsertEventResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpsertEventResponse.Merge(m, src)
}
func (m *UpsertEventResponse) XXX_Size() int {
	return m.Size()
}
func (m *UpsertEventResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UpsertEventResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UpsertEventResponse proto.InternalMessageInfo

func (m *UpsertEventResponse) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func init() {
	proto.RegisterType((*UpsertEventRequest)(nil), "event.v1.UpsertEventRequest")
	proto.RegisterType((*UpsertEventRequest_Section)(nil), "event.v1.UpsertEventRequest.Section")
	proto.RegisterType((*UpsertEventRequest_Question)(nil), "event.v1.UpsertEventRequest.Question")
	proto.RegisterType((*UpsertEventRequest_Option)(nil), "event.v1.UpsertEventRequest.Option")
	proto.RegisterType((*UpsertEventResponse)(nil), "event.v1.UpsertEventResponse")
}

func init() { proto.RegisterFile("event/v1/event.proto", fileDescriptor_f857b978571765b2) }

var fileDescriptor_f857b978571765b2 = []byte{
	// 487 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x93, 0xc1, 0x6e, 0xd3, 0x40,
	0x10, 0x86, 0xd9, 0xd4, 0x89, 0x9d, 0x49, 0x29, 0x68, 0x01, 0x61, 0x99, 0x12, 0x42, 0x20, 0x52,
	0x20, 0x92, 0xad, 0x96, 0x1b, 0xa8, 0x12, 0x4a, 0xc5, 0x19, 0xb1, 0x15, 0x17, 0x2e, 0xd5, 0xd6,
	0x1e, 0x85, 0x15, 0xc9, 0xee, 0xc6, 0xbb, 0xb1, 0xc4, 0x95, 0x57, 0xe0, 0xc2, 0x73, 0xf0, 0x14,
	0x1c, 0x91, 0x78, 0x01, 0x14, 0xfa, 0x12, 0x70, 0x42, 0x59, 0xc7, 0x21, 0x09, 0x90, 0xdb, 0xec,
	0x3f, 0xff, 0x8c, 0xbf, 0x5f, 0xf2, 0xc0, 0x4d, 0x2c, 0x50, 0xda, 0xa4, 0x38, 0x4a, 0x5c, 0x11,
	0xeb, 0x5c, 0x59, 0x45, 0x83, 0xf2, 0x51, 0x1c, 0x45, 0x87, 0x23, 0xa5, 0x46, 0x63, 0x4c, 0xb8,
	0x16, 0x09, 0x97, 0x52, 0x59, 0x6e, 0x85, 0x92, 0xa6, 0xf4, 0x45, 0xb7, 0x0b, 0x3e, 0x16, 0x19,
	0xb7, 0x98, 0x54, 0x45, 0xd9, 0xe8, 0xfe, 0xf4, 0x80, 0xbe, 0xd6, 0x06, 0x73, 0xfb, 0x62, 0xb1,
	0x89, 0xe1, 0x74, 0x86, 0xc6, 0xd2, 0x03, 0xa8, 0x89, 0x2c, 0x24, 0x1d, 0xd2, 0xaf, 0xb3, 0x9a,
	0xc8, 0xe8, 0x1d, 0xf0, 0x24, 0x9f, 0x60, 0x58, 0xeb, 0x90, 0x7e, 0x73, 0xe8, 0xff, 0x1a, 0x7a,
	0x79, 0xed, 0x3a, 0x61, 0x4e, 0xa4, 0x03, 0xd8, 0xd7, 0x3c, 0xb7, 0x22, 0x15, 0x9a, 0x4b, 0x6b,
	0xc2, 0xbd, 0x75, 0x93, 0xc7, 0x36, 0x9a, 0xf4, 0x39, 0x04, 0x06, 0x53, 0xc7, 0x16, 0x7a, 0x9d,
	0xbd, 0x7e, 0xeb, 0xf8, 0x61, 0x5c, 0x85, 0x88, 0xff, 0x26, 0x89, 0xcf, 0x4a, 0x33, 0x5b, 0x4d,
	0x45, 0x9f, 0x09, 0xf8, 0x4b, 0x75, 0x37, 0xd7, 0x23, 0x68, 0x65, 0x68, 0xd2, 0x5c, 0xe8, 0x85,
	0x77, 0x13, 0x8b, 0xb0, 0xf5, 0x1e, 0x8d, 0x20, 0xd0, 0xca, 0x08, 0xe7, 0xf3, 0x5c, 0xea, 0xd5,
	0x9b, 0x9e, 0x42, 0xd3, 0xa1, 0x38, 0xe4, 0xba, 0x43, 0xee, 0xed, 0x44, 0x7e, 0xb5, 0x74, 0xb3,
	0x3f, 0x73, 0xd1, 0x25, 0x81, 0xa0, 0xd2, 0xe9, 0x7d, 0xf0, 0x53, 0x25, 0x2d, 0x4a, 0xbb, 0x0d,
	0x5e, 0xe9, 0x1b, 0x40, 0x7b, 0x5b, 0x40, 0x14, 0x3c, 0xfb, 0x5e, 0xa3, 0x03, 0x6d, 0x32, 0x57,
	0xd3, 0x7b, 0xd0, 0x12, 0xe6, 0x3c, 0xc7, 0xe9, 0x4c, 0xe4, 0x98, 0x85, 0xf5, 0x0e, 0xe9, 0x07,
	0x0c, 0x84, 0x61, 0x4b, 0x85, 0xf6, 0xe0, 0x60, 0x2c, 0x26, 0xc2, 0x62, 0x76, 0x9e, 0xbe, 0x55,
	0x22, 0xc5, 0xb0, 0xe1, 0xd6, 0x5e, 0x5d, 0xaa, 0xa7, 0x4e, 0xa4, 0x27, 0xe0, 0x2b, 0x5d, 0x46,
	0xf5, 0x5d, 0xd4, 0x07, 0x3b, 0xa3, 0xbe, 0x74, 0x5e, 0x56, 0xcd, 0x44, 0x03, 0x68, 0x94, 0xd2,
	0x7a, 0x46, 0xf2, 0xef, 0x8c, 0xdd, 0x1e, 0xdc, 0xd8, 0x58, 0x69, 0xb4, 0x92, 0x06, 0xb7, 0xff,
	0xbd, 0xe3, 0x29, 0xec, 0x3b, 0xc3, 0x19, 0xe6, 0xc5, 0x02, 0x91, 0x43, 0x6b, 0x6d, 0x8c, 0x1e,
	0xee, 0x02, 0x8c, 0xee, 0xfe, 0xa7, 0x5b, 0x7e, 0xab, 0x7b, 0xeb, 0xc3, 0xb7, 0xcb, 0x8f, 0xb5,
	0x6b, 0x5d, 0x58, 0x1d, 0x96, 0x79, 0x4a, 0x1e, 0x0f, 0x4f, 0xbe, 0xcc, 0xdb, 0xe4, 0xeb, 0xbc,
	0x4d, 0xbe, 0xcf, 0xdb, 0xe4, 0xd3, 0x8f, 0xf6, 0x95, 0x37, 0x83, 0x91, 0x8a, 0x2d, 0xbe, 0x53,
	0x5c, 0x0b, 0x13, 0xa7, 0x6a, 0x92, 0xcc, 0xd0, 0x16, 0xca, 0x0a, 0x39, 0x4a, 0xf4, 0x45, 0x52,
	0xdd, 0xe6, 0x33, 0x57, 0x5c, 0x34, 0xdc, 0x6d, 0x3d, 0xf9, 0x1d, 0x00, 0x00, 0xff, 0xff, 0x1b,
	0xa9, 0xd7, 0x8a, 0xb4, 0x03, 0x00, 0x00,
}

func (m *UpsertEventRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpsertEventRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpsertEventRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Sections) > 0 {
		for iNdEx := len(m.Sections) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Sections[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintEvent(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Participants) > 0 {
		i -= len(m.Participants)
		copy(dAtA[i:], m.Participants)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Participants)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UpsertEventRequest_Section) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpsertEventRequest_Section) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpsertEventRequest_Section) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Questions) > 0 {
		for iNdEx := len(m.Questions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Questions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintEvent(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if m.Position != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.Position))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}

func (m *UpsertEventRequest_Question) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpsertEventRequest_Question) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpsertEventRequest_Question) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Options) > 0 {
		for iNdEx := len(m.Options) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Options[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintEvent(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if m.LimitedChoice != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.LimitedChoice))
		i--
		dAtA[i] = 0x30
	}
	if m.IsRequired {
		i--
		if m.IsRequired {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if len(m.Type) > 0 {
		i -= len(m.Type)
		copy(dAtA[i:], m.Type)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Type)))
		i--
		dAtA[i] = 0x22
	}
	if m.Position != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.Position))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Content) > 0 {
		i -= len(m.Content)
		copy(dAtA[i:], m.Content)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Content)))
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}

func (m *UpsertEventRequest_Option) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpsertEventRequest_Option) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpsertEventRequest_Option) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Content) > 0 {
		i -= len(m.Content)
		copy(dAtA[i:], m.Content)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Content)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpsertEventResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpsertEventResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpsertEventResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Id != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintEvent(dAtA []byte, offset int, v uint64) int {
	offset -= sovEvent(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *UpsertEventRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovEvent(uint64(m.Id))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.Participants)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	if len(m.Sections) > 0 {
		for _, e := range m.Sections {
			l = e.Size()
			n += 1 + l + sovEvent(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpsertEventRequest_Section) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	if m.Position != 0 {
		n += 1 + sovEvent(uint64(m.Position))
	}
	if len(m.Questions) > 0 {
		for _, e := range m.Questions {
			l = e.Size()
			n += 1 + l + sovEvent(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpsertEventRequest_Question) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Content)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	if m.Position != 0 {
		n += 1 + sovEvent(uint64(m.Position))
	}
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	if m.IsRequired {
		n += 2
	}
	if m.LimitedChoice != 0 {
		n += 1 + sovEvent(uint64(m.LimitedChoice))
	}
	if len(m.Options) > 0 {
		for _, e := range m.Options {
			l = e.Size()
			n += 1 + l + sovEvent(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpsertEventRequest_Option) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Content)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpsertEventResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovEvent(uint64(m.Id))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovEvent(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozEvent(x uint64) (n int) {
	return sovEvent(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *UpsertEventRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpsertEventRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpsertEventRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Participants", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Participants = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sections", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sections = append(m.Sections, &UpsertEventRequest_Section{})
			if err := m.Sections[len(m.Sections)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpsertEventRequest_Section) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Section: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Section: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Position", wireType)
			}
			m.Position = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Position |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Questions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Questions = append(m.Questions, &UpsertEventRequest_Question{})
			if err := m.Questions[len(m.Questions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpsertEventRequest_Question) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Question: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Question: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Content = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Position", wireType)
			}
			m.Position = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Position |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsRequired", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsRequired = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LimitedChoice", wireType)
			}
			m.LimitedChoice = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LimitedChoice |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Options", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Options = append(m.Options, &UpsertEventRequest_Option{})
			if err := m.Options[len(m.Options)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpsertEventRequest_Option) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Option: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Option: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Content = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpsertEventResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpsertEventResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpsertEventResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEvent(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthEvent
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupEvent
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthEvent
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthEvent        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEvent          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupEvent = fmt.Errorf("proto: unexpected end of group")
)
